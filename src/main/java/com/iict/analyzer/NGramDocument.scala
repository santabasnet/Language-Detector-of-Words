package com.iict.analyzer

/**
  * This class is a part of the package com.iict.preprocessing and the package
  * is a part of the project wordclassifier.
  *
  * Integrated ICT Pvt. Ltd. Jwagal, Lalitpur, Nepal.
  * https://www.integratedict.com.np
  *
  * Created by Santa on 2020-07-13.
  */
case class NGramDocument(word: String) {
    /**
      * Document string generated by the NGram words.
      *
      * @return documentString
      */
    def generate: String = generateNGrams
        .groupBy(_.length).mapValues(_.mkString(NGramDocument.SPACE)).values.mkString(NGramDocument.NEW_LINE)

    /**
      * Generates the list of NGrams from the given word by applying the
      * given word size policy.
      *
      * @return listOfNGrams
      */
    def generateNGrams: List[String] = generateNGramSizes
        .flatMap(wordIndices).map(boundary => word.slice(boundary.head, boundary.last))

    /**
      * Returns the separable word indices for the given word.
      *
      * @param size
      * @return listOfIndices
      */
    private def wordIndices(size: Int): List[List[Int]] =
        (0 to word.length - size).map(index => List(index, index + size)).toList

    /**
      * Identifies the validity of the word to generate the NGram based document.
      *
      * @return true if it passes the minimum length.
      */
    private def isValidCandidate: Boolean = word.length > NGramDocument.MINIMUM_LENGTH

    /**
      * NGram Generation Policy.
      */
    private def generateNGramSizes: List[Int] = if (!isValidCandidate) List[Int]() else variableSizes

    /**
      * Identifies the policy to generate the ngram sizes.
      *
      * @return listOfSizes
      */
    private def variableSizes: List[Int] =
        if (word.length <= NGramDocument.BOUNDARY) List(2, 3) else List(3, 4, 5)
}

object NGramDocument {
    /**
      * Space Literal.
      */
    private val SPACE = " "

    /**
      * Newline Literal.
      */
    private val NEW_LINE = "\n"

    /**
      * Minimum Word Length.
      */
    val MINIMUM_LENGTH = 2

    /**
      * Word Length Boundary.
      */
    val BOUNDARY = 5

    /**
      * Factory Implementation.
      */
    def buildWith(word: String): NGramDocument = NGramDocument(word)

}


